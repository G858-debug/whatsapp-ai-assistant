# .github/workflows/test_and_fix.yml
name: Test Conversations & Auto-Fix

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger
    inputs:
      fix_mode:
        description: 'Auto-fix mode'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - manual
          - report-only

jobs:
  test-conversations:
    runs-on: ubuntu-latest
    
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      WHATSAPP_TOKEN: ${{ secrets.WHATSAPP_TOKEN }}
      WHATSAPP_PHONE_ID: ${{ secrets.WHATSAPP_PHONE_ID }}
      TIMEZONE: 'Africa/Johannesburg'
      TEST_PHONE: '27731863036'
      
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-html pytest-json-report colorama
    
    - name: Debug - Check environment
      run: |
        echo "=== Checking environment ==="
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo ""
        echo "Python path:"
        python -c "import sys; print('\n'.join(sys.path))"
        echo ""
        echo "Installed packages:"
        pip list | head -20
    
    - name: Setup test environment
      run: |
        echo "Setting up test environment..."
        # Check if setup file exists
        if [ -f "tests/setup_test_env.py" ]; then
          python tests/setup_test_env.py
        else
          echo "Setup file not found, skipping..."
        fi
    
    - name: Run debug test first
      continue-on-error: true
      run: |
        echo "Running debug test to identify issues..."
        python -c "import sys, os; print('Python:', sys.version); print('Current dir:', os.getcwd()); print('Services exists:', os.path.exists('services')); print('Tests exists:', os.path.exists('tests'))"
        
        # If debug test file exists, run it too
        if [ -f "tests/test_debug.py" ]; then
          echo "Running test_debug.py..."
          python tests/test_debug.py || true
        fi
    
    - name: Run conversation flow tests
      id: run-tests
      continue-on-error: true
      run: |
        echo "Running comprehensive real-world tests..."
        
        # Create default results in case tests fail to run
        echo '{"summary": {"total": 0, "passed": 0, "failed": 0}, "tests": []}' > test-results.json
        echo "<html><body>Tests not run</body></html>" > test-report.html
        
        # First, try to run the comprehensive real-world tests
        if [ -f "tests/test_refiloe_real_world.py" ]; then
          echo "Running real-world comprehensive tests..."
          python -m pytest tests/test_refiloe_real_world.py \
            --html=test-report.html \
            --self-contained-html \
            --json-report \
            --json-report-file=test-results.json \
            -v \
            --tb=short \
            --capture=no 2>&1 | tee test-output.log
          TEST_EXIT_CODE=$?
        else
          echo "Real-world tests not found, running basic tests..."
          python -m pytest tests/ \
            --ignore=tests/test_railway_api.py \
            --ignore=tests/test_calendar_service.py \
            --html=test-report.html \
            --self-contained-html \
            --json-report \
            --json-report-file=test-results.json \
            -v \
            --tb=short \
            --capture=no 2>&1 | tee test-output.log
          TEST_EXIT_CODE=$?
        fi
        
        if [ $TEST_EXIT_CODE -eq 0 ]; then
          echo "✅ All tests passed!"
          echo "test_status=success" >> $GITHUB_ENV
        else
          echo "❌ Some tests failed (exit code: $TEST_EXIT_CODE)"
          echo "test_status=failure" >> $GITHUB_ENV
          
          # Show failed tests
          echo "=== Failed Tests ==="
          grep -E "FAILED|ERROR" test-output.log | head -20 || true
          
          # Check for specific issues
          if grep -q "currency\|pricing\|R450" test-output.log; then
            echo "💰 Currency parsing issues detected"
          fi
          if grep -q "natural\|ai\|invalid command" test-output.log; then
            echo "🤖 Natural language processing issues detected"
          fi
          if grep -q "registration\|step 7" test-output.log; then
            echo "📝 Registration flow issues detected"
          fi
        fi
        
        # Always show test summary
        if [ -f "test-results.json" ]; then
          echo "=== Test Summary ==="
          # Use single-line Python command
          python -c "import json; d=json.load(open('test-results.json')); s=d.get('summary',{}); print(f\"Total: {s.get('total',0)}, Passed: {s.get('passed',0)}, Failed: {s.get('failed',0)}\")" || true
        fi
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test-report.html
          test-results.json
          test-output.log
    
    - name: Display test results
      if: always()
      run: |
        echo "=== Displaying Test Results ==="
        
        # Show JSON results if available
        if [ -f "test-results.json" ]; then
          echo "Test Results JSON:"
          cat test-results.json | python -m json.tool | head -100 || true
          
          # Extract and show failed tests using single-line command
          echo ""
          echo "=== Failed Tests ==="
          python -c "import json; d=json.load(open('test-results.json')); [print(f\"❌ {t.get('nodeid','Unknown')}\") for t in d.get('tests',[]) if t.get('outcome')=='failed']" || true
        else
          echo "No test results JSON found"
        fi
    
    - name: Analyze failures and generate fixes
      id: analyze-fixes
      if: steps.run-tests.outcome == 'failure' || failure()
      run: |
        echo "Checking if fixes are needed..."
        if [ -f "test-results.json" ]; then
          # Check if there are any failed tests using grep
          if grep -q '"outcome": "failed"' test-results.json; then
            echo "Found failed tests, generating fixes..."
            python tests/auto_fix_generator.py || echo "Fix generator not found"
          else
            echo "✅ All tests passed - no fixes needed!"
          fi
        else
          echo "No test results found"
        fi
    
    - name: Apply auto-fixes and create PR
      if: steps.analyze-fixes.outcome == 'success' && github.event.inputs.fix_mode != 'report-only'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Configure git
        git config --global user.name 'Refiloe Auto-Fix Bot'
        git config --global user.email 'bot@refiloe.ai'
        
        # Create fix branch
        BRANCH_NAME="auto-fix-$(date +%Y%m%d-%H%M%S)"
        git checkout -b $BRANCH_NAME
        
        # Apply fixes
        python tests/apply_fixes.py
        
        # Commit changes if any
        if [[ -n $(git status -s) ]]; then
          git add -A
          git commit -m "🔧 Auto-fix: Resolve conversation flow issues

          Automated fixes for test failures:
          $(python tests/get_fix_summary.py)"
          
          # Push branch
          git push origin $BRANCH_NAME
          
          # Create PR
          gh pr create \
            --title "🔧 Auto-Fix: Conversation Flow Issues" \
            --body "$(python tests/generate_pr_description.py)" \
            --base main \
            --head $BRANCH_NAME \
            --label "auto-fix" \
            --assignee ${{ github.actor }}
        else
          echo "No fixes needed or could be applied automatically"
        fi
    
    - name: Post test summary to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('test-results.json', 'utf8'));
          
          const passed = results.tests.filter(t => t.outcome === 'passed').length;
          const failed = results.tests.filter(t => t.outcome === 'failed').length;
          const total = results.tests.length;
          
          const emoji = failed === 0 ? '✅' : '❌';
          const status = failed === 0 ? 'All tests passed!' : `${failed} test(s) failed`;
          
          const comment = `## ${emoji} Conversation Flow Test Results
          
          **Status:** ${status}
          **Passed:** ${passed}/${total}
          
          ${failed > 0 ? '### Failed Tests:\n' + results.tests
            .filter(t => t.outcome === 'failed')
            .map(t => `- ❌ ${t.nodeid}: ${t.call.longrepr}`)
            .join('\n') : ''}
          
          [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ${failed > 0 && '${{ steps.analyze-fixes.outcome }}' === 'success' ? 
            '🔧 **Auto-fixes available!** A PR has been created with suggested fixes.' : ''}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Cleanup test data
      if: always()
      run: |
        echo "Cleaning up test data from Supabase..."
        python tests/cleanup_test_data.py || echo "Cleanup script not found or failed"
    
    - name: Celebrate success
      if: success() && steps.run-tests.outcome == 'success'
      run: |
        echo "🎉🎉🎉 ALL TESTS PASSED! 🎉🎉🎉"
        echo "================================"
        echo "✅ Test suite is working correctly"
        echo "✅ All conversation flows passed"
        echo "✅ No fixes needed"
        echo "================================"
    
    - name: Send notification
      if: failure() && github.ref == 'refs/heads/main'
      run: |
        echo "Tests failed on main branch - would send notification here"
        # Could integrate with Slack, email, or WhatsApp notification

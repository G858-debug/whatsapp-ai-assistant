@claude 

1. Fix the database column name in _get_conversation_history method:
Search for this in services/refiloe_helpers.py or wherever _get_conversation_history is defined:
Find:
pythonmessages = self.db.table('messages').select('content')
Change to:
pythonmessages = self.db.table('messages').select('message_text')
And update the return statement:
pythonif messages.data:
    return [msg['message_text'] for msg in reversed(messages.data)]
2. Fix Anthropic API usage in services/ai_intent_handler.py (around line 60):
Find:
pythonresponse = self.client.completions.create(
Change to:
pythonresponse = self.client.messages.create(
    model=self.model,
    max_tokens=500,
    temperature=0.3,
    messages=[{"role": "user", "content": prompt}]
)
Make sure the model is defined in __init__:
pythondef __init__(self, config, supabase_client):
    # ... other code ...
    self.client = Anthropic(api_key=config.ANTHROPIC_API_KEY)
    self.model = "claude-3-5-sonnet-20241022"  # Add this line
3. Fix _log_interaction method to accept both calling patterns:
In the file where _log_interaction is defined (likely services/refiloe_helpers.py):
Replace the entire method with:
pythondef _log_interaction(self, **kwargs):
    """Log interaction for analytics - flexible signature"""
    try:
        # Extract parameters
        user_id = kwargs.get('user_id')
        user_type = kwargs.get('user_type')
        message = kwargs.get('message')
        intent = kwargs.get('intent')
        response_type = kwargs.get('response_type')
        phone_number = kwargs.get('phone_number')
        message_data = kwargs.get('message_data')
        response = kwargs.get('response')
        
        # Handle new signature (from _handle_text_message)
        if user_id and user_type and message:
            log_data = {
                'message_text': message,
                'ai_intent': intent,
                'message_type': response_type or 'text',
                'direction': 'incoming',
                'created_at': datetime.now().isoformat()
            }
            
            # Add trainer_id or client_id based on user_type
            if user_type == 'trainer':
                log_data['trainer_id'] = user_id
                log_data['whatsapp_from'] = message_data.get('from') if message_data else ''
                log_data['whatsapp_to'] = 'system'
            else:
                log_data['client_id'] = user_id
                log_data['whatsapp_from'] = message_data.get('from') if message_data else ''
                log_data['whatsapp_to'] = 'system'
                
        # Handle old signature (from process_message)  
        elif phone_number and message_data and response:
            log_data = {
                'whatsapp_from': phone_number,
                'whatsapp_to': 'system',
                'message_text': json.dumps(message_data),
                'ai_intent': 'general',
                'direction': 'incoming',
                'created_at': datetime.now().isoformat()
            }
        else:
            return  # Invalid call
            
        self.db.table('messages').insert(log_data).execute()
        
    except Exception as e:
        log_error(f"Error logging interaction: {str(e)}")
4. Also ensure proper imports at the top of files:
In services/ai_intent_handler.py:
pythonfrom anthropic import Anthropic
from datetime import datetime
import json
In the file with _log_interaction:
pythonfrom datetime import datetime
import json
from utils.logger import log_error

@apply


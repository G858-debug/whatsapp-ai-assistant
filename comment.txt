@claude Act as multiple specialized agents to fix and optimize each of the following tasks

Please perform a comprehensive reorganization and optimization of the Refiloe WhatsApp AI assistant codebase. This is a critical refactoring to fix current issues and improve maintainability.

## CURRENT CRITICAL ISSUES TO FIX:

1. Files are too large to edit efficiently
2. Code organization is unclear with mixed responsibilities
3. There are likely unused/deprecated files

## REORGANIZATION TASKS:

### 1. SPLIT services/refiloe.py into smaller, focused modules:

Create these new files:
- services/refiloe_core.py - Main RefiloeService class with __init__ and process_message only
- services/refiloe_handlers.py - All _handle_* methods (booking, payment, workout, etc.)
- services/refiloe_helpers.py - Helper methods (_get_user_context, _log_interaction, etc.)
- services/refiloe_flows.py - Conversation flows (_start_booking_flow, _start_workout_flow, etc.)
- services/refiloe_messages.py - Message formatting methods (_get_help_message, etc.)

### 2. FIX THE CRITICAL BUGS:
- Fix syntax errors in _get_help_message method
- Ensure proper imports between split files

### 3. REORGANIZE OTHER SERVICES:

Review and reorganize these files if they're over 500 lines:
- services/whatsapp.py → Split if needed
- services/ai_intent_handler.py → Split if needed
- services/dashboard_sync.py → Split if needed
- payment_manager.py → Move to services/payment_manager.py

### 4. CREATE PROPER DIRECTORY STRUCTURE:
efiloe/
├── app.py (main Flask app - keep lean)
├── config.py
├── requirements.txt
├── README.md
├── services/
│   ├── init.py
│   ├── refiloe_core.py (main orchestrator)
│   ├── refiloe_handlers.py
│   ├── refiloe_helpers.py
│   ├── refiloe_flows.py
│   ├── refiloe_messages.py
│   ├── whatsapp.py
│   ├── ai_intent_handler.py
│   ├── scheduler.py
│   ├── workout.py
│   ├── assessment.py
│   ├── habits.py
│   ├── analytics.py
│   ├── subscription_manager.py
│   ├── payment_manager.py
│   ├── calendar_service.py
│   └── dashboard_sync.py
├── models/
│   ├── init.py
│   ├── trainer.py
│   ├── client.py
│   ├── booking.py
│   └── payment.py
├── utils/
│   ├── init.py
│   ├── logger.py
│   ├── rate_limiter.py
│   ├── input_sanitizer.py
│   └── validators.py
├── routes/
│   ├── init.py
│   ├── webhook.py (move webhook routes here)
│   ├── dashboard.py
│   └── api.py
└── tests/
├── init.py
└── test_refiloe.py

### 5. DELETE UNNECESSARY FILES:

Identify and delete:
- Any backup files (*_backup.py, *_old.py)
- Duplicate SQL files
- Unused imports or modules
- Test files that aren't being used
- Any files with "deprecated" or "unused" in the name

### 6. OPTIMIZE IMPORTS:

In each file:
- Remove unused imports
- Use relative imports where appropriate
- Add __init__.py files with proper exports
- Ensure circular dependencies are resolved

### 7. ADD PROPER ERROR HANDLING:

Ensure each module has:
- Proper try/except blocks
- Consistent error logging
- Graceful fallbacks

### 8. CREATE A MIGRATION GUIDE:

Create a file `MIGRATION.md` that documents:
- What files were moved/renamed
- What methods were relocated
- Any breaking changes
- How to test the reorganized code

After reorganization, ensure:

 app.py can import and initialize RefiloeService
 No circular imports exist
 All webhook endpoints still work
 File sizes are under 500 lines each
 No duplicate method definitions
 All imports are resolved
 Tests can run (if any exist)

@apply

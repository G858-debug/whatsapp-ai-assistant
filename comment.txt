@claude @apply the deploy crashed again. 
Here are the logs: 
ImportError: cannot import name 'HabitService' from 'services.habits' (/app/services/habits.py)
Traceback (most recent call last):
  File "/app/app.py", line 16, in <module>
    from services.refiloe import RefiloeService
  File "/app/services/refiloe.py", line 9, in <module>
    from services.scheduler import SchedulerService
  File "/app/services/scheduler.py", line 9, in <module>
    from services.habits import HabitService  # NEW IMPORT
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^
ImportError: cannot import name 'HabitService' from 'services.habits' (/app/services/habits.py)

Here is the complete habits.py:
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from utils.logger import log_error, log_info
import json

class HabitTrackingService:
    """Service for tracking client habits and daily metrics"""
    
    def __init__(self, supabase_client):
        self.db = supabase_client
        self.habit_types = [
            'water_intake',
            'sleep_hours',
            'steps',
            'calories',
            'workout_completed',
            'meals_logged',
            'weight',
            'mood'
        ]
    
    def log_habit(self, client_id: str, habit_type: str, value: any, date: Optional[str] = None) -> Dict:
        """Log a habit entry for a client"""
        try:
            if habit_type not in self.habit_types:
                return {
                    'success': False,
                    'error': f'Invalid habit type. Valid types: {", ".join(self.habit_types)}'
                }
            
            # Use today's date if not specified
            if not date:
                date = datetime.now().date().isoformat()
            
            # Check if entry exists for today
            existing = self.db.table('habit_tracking').select('*').eq(
                'client_id', client_id
            ).eq('habit_type', habit_type).eq('date', date).execute()
            
            if existing.data:
                # Update existing entry
                result = self.db.table('habit_tracking').update({
                    'value': str(value),
                    'updated_at': datetime.now().isoformat()
                }).eq('id', existing.data[0]['id']).execute()
            else:
                # Create new entry
                result = self.db.table('habit_tracking').insert({
                    'client_id': client_id,
                    'habit_type': habit_type,
                    'value': str(value),
                    'date': date,
                    'created_at': datetime.now().isoformat()
                }).execute()
            
            if result.data:
                log_info(f"Habit logged: {habit_type} = {value} for client {client_id}")
                
                # Check for streaks
                streak = self.calculate_streak(client_id, habit_type)
                
                return {
                    'success': True,
                    'message': f'âœ… {habit_type.replace("_", " ").title()} logged: {value}',
                    'streak': streak
                }
            
            return {'success': False, 'error': 'Failed to log habit'}
            
        except Exception as e:
            log_error(f"Error logging habit: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def get_client_habits(self, client_id: str, days: int = 7) -> Dict:
        """Get client's habit data for the specified number of days"""
        try:
            start_date = (datetime.now() - timedelta(days=days)).date().isoformat()
            
            result = self.db.table('habit_tracking').select('*').eq(
                'client_id', client_id
            ).gte('date', start_date).order('date', desc=True).execute()
            
            # Organize by date and type
            habits_by_date = {}
            for entry in result.data:
                date = entry['date']
                if date not in habits_by_date:
                    habits_by_date[date] = {}
                habits_by_date[date][entry['habit_type']] = entry['value']
            
            return {
                'success': True,
                'data': habits_by_date,
                'days_tracked': len(habits_by_date)
            }
            
        except Exception as e:
            log_error(f"Error fetching habits: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def calculate_streak(self, client_id: str, habit_type: str) -> int:
        """Calculate current streak for a specific habit"""
        try:
            # Get all entries for this habit, ordered by date
            result = self.db.table('habit_tracking').select('date').eq(
                'client_id', client_id
            ).eq('habit_type', habit_type).order('date', desc=True).execute()
            
            if not result.data:
                return 0
            
            streak = 0
            current_date = datetime.now().date()
            
            for entry in result.data:
                entry_date = datetime.fromisoformat(entry['date']).date()
                
                # Check if dates are consecutive
                if entry_date == current_date - timedelta(days=streak):
                    streak += 1
                else:
                    break
            
            return streak
            
        except Exception as e:
            log_error(f"Error calculating streak: {str(e)}")
            return 0
    
    def get_current_streak(self, client_id: str) -> int:
        """Get the longest current streak across all habits"""
        try:
            max_streak = 0
            
            # Check workout completion streak (most important)
            workout_streak = self.calculate_streak(client_id, 'workout_completed')
            max_streak = max(max_streak, workout_streak)
            
            return max_streak
            
        except Exception as e:
            log_error(f"Error getting current streak: {str(e)}")
            return 0
    
    def get_habit_summary(self, client_id: str, days: int = 30) -> Dict:
        """Get summary statistics for client habits"""
        try:
            habits_data = self.get_client_habits(client_id, days)
            
            if not habits_data['success']:
                return habits_data
            
            summary = {
                'total_days_tracked': habits_data['days_tracked'],
                'habits': {}
            }
            
            # Calculate averages and totals for each habit type
            for habit_type in self.habit_types:
                values = []
                for date_data in habits_data['data'].values():
                    if habit_type in date_data:
                        try:
                            values.append(float(date_data[habit_type]))
                        except (ValueError, TypeError):
                            continue
                
                if values:
                    summary['habits'][habit_type] = {
                        'average': sum(values) / len(values),
                        'total': sum(values),
                        'days_logged': len(values)
                    }
            
            return {
                'success': True,
                'summary': summary
            }
            
        except Exception as e:
            log_error(f"Error getting habit summary: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def set_habit_goal(self, client_id: str, habit_type: str, goal_value: any, 
                       goal_type: str = 'daily') -> Dict:
        """Set a goal for a specific habit"""
        try:
            goal_data = {
                'client_id': client_id,
                'habit_type': habit_type,
                'goal_value': str(goal_value),
                'goal_type': goal_type,
                'is_active': True,
                'created_at': datetime.now().isoformat()
            }
            
            # Deactivate existing goals for this habit
            self.db.table('habit_goals').update({
                'is_active': False
            }).eq('client_id', client_id).eq('habit_type', habit_type).execute()
            
            # Create new goal
            result = self.db.table('habit_goals').insert(goal_data).execute()
            
            if result.data:
                return {
                    'success': True,
                    'message': f'Goal set: {goal_value} {habit_type.replace("_", " ")} {goal_type}'
                }
            
            return {'success': False, 'error': 'Failed to set goal'}
            
        except Exception as e:
            log_error(f"Error setting habit goal: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def check_goal_progress(self, client_id: str) -> Dict:
        """Check progress towards habit goals"""
        try:
            # Get active goals
            goals = self.db.table('habit_goals').select('*').eq(
                'client_id', client_id
            ).eq('is_active', True).execute()
            
            if not goals.data:
                return {
                    'success': True,
                    'message': 'No active goals set',
                    'goals': []
                }
            
            progress_list = []
            
            for goal in goals.data:
                # Get recent habit data
                if goal['goal_type'] == 'daily':
                    days = 1
                elif goal['goal_type'] == 'weekly':
                    days = 7
                else:
                    days = 30
                
                habits = self.get_client_habits(client_id, days)
                
                if habits['success']:
                    # Calculate progress
                    total = 0
                    count = 0
                    
                    for date_data in habits['data'].values():
                        if goal['habit_type'] in date_data:
                            try:
                                total += float(date_data[goal['habit_type']])
                                count += 1
                            except (ValueError, TypeError):
                                continue
                    
                    if count > 0:
                        average = total / count
                        goal_value = float(goal['goal_value'])
                        progress = (average / goal_value) * 100
                        
                        progress_list.append({
                            'habit': goal['habit_type'],
                            'goal': goal_value,
                            'current': average,
                            'progress_percentage': min(progress, 100),
                            'goal_type': goal['goal_type']
                        })
            
            return {
                'success': True,
                'goals': progress_list
            }
            
        except Exception as e:
            log_error(f"Error checking goal progress: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def get_insights(self, client_id: str) -> Dict:
        """Generate insights from habit data"""
        try:
            # Get 30-day summary
            summary = self.get_habit_summary(client_id, 30)
            
            if not summary['success']:
                return summary
            
            insights = []
            
            # Check water intake
            if 'water_intake' in summary['summary']['habits']:
                avg_water = summary['summary']['habits']['water_intake']['average']
                if avg_water < 2.0:
                    insights.append("ðŸ’§ Your average water intake is below 2 liters. Try to increase it!")
                elif avg_water >= 3.0:
                    insights.append("ðŸ’§ Great job on water intake! You're well hydrated.")
            
            # Check sleep
            if 'sleep_hours' in summary['summary']['habits']:
                avg_sleep = summary['summary']['habits']['sleep_hours']['average']
                if avg_sleep < 7:
                    insights.append("ðŸ˜´ You're averaging less than 7 hours of sleep. Aim for 7-9 hours.")
                elif avg_sleep >= 8:
                    insights.append("ðŸ˜´ Excellent sleep habits! Keep it up.")
            
            # Check workout consistency
            if 'workout_completed' in summary['summary']['habits']:
                workouts = summary['summary']['habits']['workout_completed']['days_logged']
                if workouts < 8:  # Less than 2 per week
                    insights.append("ðŸ’ª Try to increase workout frequency to at least 3 times per week.")
                elif workouts >= 12:  # 3+ per week
                    insights.append("ðŸ’ª Amazing workout consistency! You're crushing it!")
            
            # Check steps
            if 'steps' in summary['summary']['habits']:
                avg_steps = summary['summary']['habits']['steps']['average']
                if avg_steps < 5000:
                    insights.append("ðŸš¶ Your daily steps are low. Try to reach at least 8,000 steps.")
                elif avg_steps >= 10000:
                    insights.append("ðŸš¶ Fantastic step count! You're very active.")
            
            return {
                'success': True,
                'insights': insights,
                'summary': summary['summary']
            }
            
        except Exception as e:
            log_error(f"Error generating insights: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def parse_habit_from_text(self, text: str) -> Optional[Dict]:
        """Parse habit information from natural language text"""
        try:
            text_lower = text.lower()
            
            # Water intake patterns
            if any(word in text_lower for word in ['water', 'drank', 'hydration']):
                # Extract number
                import re
                numbers = re.findall(r'(\d+(?:\.\d+)?)', text)
                if numbers:
                    value = float(numbers[0])
                    # Convert ml to liters if needed
                    if 'ml' in text_lower:
                        value = value / 1000
                    return {'type': 'water_intake', 'value': value}
            
            # Sleep patterns
            if any(word in text_lower for word in ['sleep', 'slept', 'hours sleep']):
                import re
                numbers = re.findall(r'(\d+(?:\.\d+)?)', text)
                if numbers:
                    return {'type': 'sleep_hours', 'value': float(numbers[0])}
            
            # Steps patterns
            if any(word in text_lower for word in ['steps', 'walked', 'walking']):
                import re
                numbers = re.findall(r'(\d+)', text)
                if numbers:
                    return {'type': 'steps', 'value': int(numbers[0])}
            
            # Workout completion
            if any(word in text_lower for word in ['workout', 'completed', 'trained', 'exercise']):
                if any(word in text_lower for word in ['completed', 'done', 'finished']):
                    return {'type': 'workout_completed', 'value': 1}
            
            # Weight patterns
            if any(word in text_lower for word in ['weight', 'weigh', 'kg', 'kilograms']):
                import re
                numbers = re.findall(r'(\d+(?:\.\d+)?)', text)
                if numbers:
                    return {'type': 'weight', 'value': float(numbers[0])}
            
            return None
            
        except Exception as e:
            log_error(f"Error parsing habit from text: {str(e)}")
            return None
